{"remainingRequest":"/Users/dmr/PrivateProject/Nodejs/MydicoCRM/frontend/node_modules/thread-loader/dist/cjs.js??ref--4-2!/Users/dmr/PrivateProject/Nodejs/MydicoCRM/frontend/node_modules/babel-loader/lib/index.js??ref--4-3!/Users/dmr/PrivateProject/Nodejs/MydicoCRM/frontend/node_modules/source-map-loader/index.js!/Users/dmr/PrivateProject/Nodejs/MydicoCRM/frontend/node_modules/eslint-loader/dist/cjs.js!/Users/dmr/PrivateProject/Nodejs/MydicoCRM/frontend/src/views/pages/product/ProductList/product.api.js","dependencies":[{"path":"/Users/dmr/PrivateProject/Nodejs/MydicoCRM/frontend/src/views/pages/product/ProductList/product.api.js","mtime":1619205950207},{"path":"/Users/dmr/PrivateProject/Nodejs/MydicoCRM/frontend/node_modules/react-hot-loader/webpack.js","mtime":499162500000},{"path":"/Users/dmr/PrivateProject/Nodejs/MydicoCRM/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/dmr/PrivateProject/Nodejs/MydicoCRM/frontend/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/dmr/PrivateProject/Nodejs/MydicoCRM/frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/dmr/PrivateProject/Nodejs/MydicoCRM/frontend/node_modules/source-map-loader/index.js","mtime":499162500000},{"path":"/Users/dmr/PrivateProject/Nodejs/MydicoCRM/frontend/node_modules/eslint-loader/dist/cjs.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dmr/PrivateProject/Nodejs/MydicoCRM/frontend/src/views/pages/product/ProductList/product.api.js"],"names":["createAsyncThunk","axios","getProduct","params","page","size","sort","thunkAPI","get","result","data","total","headers","rejectWithValue","response","getProductBirthday","getDetailProduct","userId","creatingProduct","body","post","statusCode","status","updateProduct","put","creatingProductType","creatingProductStatus","getCity","getDistrict","getWard","getProductType","getProductStatus","getBranches"],"mappings":"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","sourcesContent":["import {createAsyncThunk} from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nexport const getProduct = createAsyncThunk('api/products', async (params = {page: 0, size: 20, sort: 'createdDate,desc'}, thunkAPI) => {\n  try {\n    const result = await axios.get('api/products', {params: params});\n    return {data: result.data, total: result.headers['x-total-count']};\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data);\n  }\n});\n\nexport const getProductBirthday = createAsyncThunk(\n    'api/products/birthday',\n    async (params = {page: 0, size: 20, sort: 'createdDate,desc'}, thunkAPI) => {\n      try {\n        const result = await axios.get('api/products/birthday', {params: params});\n        return {data: result.data, total: result.headers['x-total-count']};\n      } catch (error) {\n        return thunkAPI.rejectWithValue(error.response.data);\n      }\n    },\n);\n\nexport const getDetailProduct = createAsyncThunk('api/detail/products', async (userId, thunkAPI) => {\n  try {\n    const result = await axios.get('api/products/' + userId);\n    return result.data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data);\n  }\n});\n\nexport const creatingProduct = createAsyncThunk('api/create/products', async (body, thunkAPI) => {\n  try {\n    const result = await axios.post('api/products', body);\n    return {data: result.data, headers: result.headers, statusCode: result.status};\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data);\n  }\n});\n\nexport const updateProduct = createAsyncThunk('api/update/products', async (body, thunkAPI) => {\n  try {\n    const result = await axios.put('api/products', body);\n    return {data: result.data, headers: result.headers, statusCode: result.status};\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data);\n  }\n});\n\nexport const creatingProductType = createAsyncThunk('api/create/products-type', async (body, thunkAPI) => {\n  try {\n    const result = await axios.post('api/product-types', body);\n    return result.data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data);\n  }\n});\n\nexport const creatingProductStatus = createAsyncThunk('api/create/products-status', async (body, thunkAPI) => {\n  try {\n    const result = await axios.post('api/product-statuses', body);\n    return result.data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data);\n  }\n});\n\nexport const getCity = createAsyncThunk('api/cities', async (params = {page: 0, size: 100, sort: 'code,asc'}, thunkAPI) => {\n  try {\n    const result = await axios.get('api/cities', {params: params});\n    return result.data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data);\n  }\n});\n\nexport const getDistrict = createAsyncThunk('api/districts', async (params, thunkAPI) => {\n  try {\n    const result = await axios.get('api/districts', {params});\n    return result.data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data);\n  }\n});\n\nexport const getWard = createAsyncThunk('api/wards', async (params = {page: 0, size: 20, sort: 'code,asc'}, thunkAPI) => {\n  try {\n    const result = await axios.get('api/wards', {params: params});\n    return result.data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data);\n  }\n});\n\nexport const getProductType = createAsyncThunk(\n    'api/product/product-types',\n    async (params = {page: 0, size: 20, sort: 'name,asc'}, thunkAPI) => {\n      try {\n        const result = await axios.get('api/product-types', {params: params});\n        return result.data;\n      } catch (error) {\n        return thunkAPI.rejectWithValue(error.response.data);\n      }\n    },\n);\n\nexport const getProductStatus = createAsyncThunk(\n    'api/product/product-statuses',\n    async (params = {page: 0, size: 20, sort: 'name,asc'}, thunkAPI) => {\n      try {\n        const result = await axios.get('api/product-statuses', {params: params});\n        return result.data;\n      } catch (error) {\n        return thunkAPI.rejectWithValue(error.response.data);\n      }\n    },\n);\n\nexport const getBranches = createAsyncThunk('api/product/branches', async (params = {page: 0, size: 20, sort: 'name,asc'}, thunkAPI) => {\n  try {\n    const result = await axios.get('api/branches', {params: params});\n    return result.data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data);\n  }\n});\n"]}]}