{"remainingRequest":"/Users/dmr/PrivateProject/Nodejs/MydicoCRM/frontend/node_modules/babel-loader/lib/index.js??ref--4-1!/Users/dmr/PrivateProject/Nodejs/MydicoCRM/frontend/node_modules/source-map-loader/index.js!/Users/dmr/PrivateProject/Nodejs/MydicoCRM/frontend/node_modules/eslint-loader/dist/cjs.js!/Users/dmr/PrivateProject/Nodejs/MydicoCRM/frontend/src/views/pages/sales/Promotion/CreateLongTermPromotion.js","dependencies":[{"path":"/Users/dmr/PrivateProject/Nodejs/MydicoCRM/frontend/src/views/pages/sales/Promotion/CreateLongTermPromotion.js","mtime":1611935594589},{"path":"/Users/dmr/PrivateProject/Nodejs/MydicoCRM/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/dmr/PrivateProject/Nodejs/MydicoCRM/frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/dmr/PrivateProject/Nodejs/MydicoCRM/frontend/node_modules/source-map-loader/index.js","mtime":499162500000},{"path":"/Users/dmr/PrivateProject/Nodejs/MydicoCRM/frontend/node_modules/eslint-loader/dist/cjs.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}